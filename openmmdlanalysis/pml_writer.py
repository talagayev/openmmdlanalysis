import re
import pandas as pd
import xml.etree.ElementTree as ET
import numpy as np

def generate_pharmacophore_centers(df, interactions):
    """Generates pharmacophore points for interactions that are points such as hydrophobic and ionic interactions

    Args:
        df (pandas dataframe): dataframe generated by analisis using plip 
        interactions (list): list of interactions to generate pharmacophore from

    Returns:
        dict: interaction from wicht pharmacophore is generated as key and list of coordinates as value
    """
    coord_pattern = re.compile(r'\(([\d.-]+), ([\d.-]+), ([\d.-]+)\)')
    pharmacophore = {}
    for interaction in interactions:
        counter = 0
        sum_x, sum_y, sum_z = 0, 0, 0
        for index, row in df.iterrows():
            if row[interaction] == 1:
                coord_match = coord_pattern.match(row['LIGCOO'])
                if coord_match:
                    x, y, z = map(float, coord_match.groups())
                    sum_x += x
                    sum_y += y
                    sum_z += z
                    counter += 1
            
        center_x = round((sum_x / counter), 3)
        center_y = round((sum_y / counter), 3)
        center_z = round((sum_z / counter), 3)
        pharmacophore[interaction] = [center_x, center_y, center_z]
    return pharmacophore


def generate_pharmacophore_vectors(df, interactions):
    """Generates pharmacophore points for interactions that are vectors such as hydrogen bond donors or acceptors

    Args:
        df (pandas dataframe): dataframe generated by analisis using plip 
        interactions (list): list of interactions to generate pharmacophore from

    Returns:
        dict: interaction from wicht pharmacophore is generated as key and list of coordinates as value (first coords are ligand side, second are protein side)
    """
    coord_pattern = re.compile(r'\(([\d.-]+), ([\d.-]+), ([\d.-]+)\)')
    pharmacophore = {}
    for interaction in interactions:
        counter = 0
        sum_x, sum_y, sum_z = 0, 0, 0
        sum_a, sum_b, sum_c = 0, 0, 0
        for index, row in df.iterrows():
            if row[interaction] == 1:
                coord_match = coord_pattern.match(row['LIGCOO'])
                if coord_match:
                    x, y, z = map(float, coord_match.groups())
                    sum_x += x
                    sum_y += y
                    sum_z += z
                coord_match = coord_pattern.match(row['PROTCOO'])
                if coord_match:
                    a, b, c = map(float, coord_match.groups())
                    sum_a += a
                    sum_b += b
                    sum_c += c
                    counter += 1
            
        center_x = round((sum_x / counter), 3)
        center_y = round((sum_y / counter), 3)
        center_z = round((sum_z / counter), 3)
        center_a = round((sum_a / counter), 3)
        center_b = round((sum_b / counter), 3)
        center_c = round((sum_c / counter), 3)
        pharmacophore[interaction] = [[center_x, center_y, center_z], [center_a, center_b, center_c]]
    return pharmacophore
    
    
def generate_md_pharmacophore_cloudcenters(df, core_compound, output_filename, sysname, id_num=0):
    """Generates pharmacophore from all interactions formed in the MD simulation.
    A feature is generated for each interaction at the center of all its ocurrences.

    Args:
        df (pandas dataframe): dataframe generated by analysis using plip (generally df_all)
        core_compound (str): name of the ligand
        output_filename (str): name the of the output .pml file
        sysname (str): name of thesystem simulated
        id_num (int, optional): id number. Defaults to 0.
    """
    feature_id_counter = 0

    root = ET.Element("MolecularEnvironment", version="0.0", id=f"OpennMMDL_Analysis{id_num}", name=sysname)
    pharmacophore = ET.SubElement(root, "pharmacophore", name=sysname, id=f"pharmacophore{id_num}", pharmacophoreType="LIGAND_SCOUT")

    for interaction in ["Acceptor_hbond", "Donor_hbond", "pistacking", "hydrophobic", "PI_saltbridge", "NI_saltbridge"]:
        feature_types = {
            "Acceptor_hbond": "HBA",
            "Donor_hbond": "HBD",
            "pistacking": "AR",
            "hydrophobic": "H",
            "PI_saltbridge": "PI",
            "NI_saltbridge": "NI"
        }
        if interaction not in feature_types:
            continue
        
        feature_type = feature_types[interaction]
        if interaction in ["Acceptor_hbond", "Donor_hbond"]:
            pharm = generate_pharmacophore_vectors(df, df.filter(regex=interaction).columns)
            for feature_name, position in pharm.items():
                feature_id_counter += 1
                lig_loc = position[0]
                prot_loc = position[1]
                points_to_lig = "true" if feature_type == "HBA" else "false"
                hasSyntheticProjectedPoint = "false"
                vector = ET.SubElement(
                    pharmacophore,
                    "vector",
                    name=feature_type,
                    featureId=feature_name,
                    pointsToLigand=points_to_lig,
                    hasSyntheticProjectedPoint=hasSyntheticProjectedPoint,
                    optional="false",
                    disabled="false",
                    weight="1.0",
                    coreCompound=core_compound,
                    id=f"feature{str(feature_id_counter)}"
                )
                if feature_type == "HBA":
                    origin = ET.SubElement(
                        vector,
                        "origin",
                        x3=str(prot_loc[0]),
                        y3=str(prot_loc[1]),
                        z3=str(prot_loc[2]),
                        tolerance="1.9499999"
                    )
                    target = ET.SubElement(
                        vector,
                        "target",
                        x3=str(lig_loc[0]),
                        y3=str(lig_loc[1]),
                        z3=str(lig_loc[2]),
                        tolerance="1.5"
                    )
                if feature_type == "HBD":
                    origin = ET.SubElement(
                        vector,
                        "origin",
                        x3=str(lig_loc[0]),
                        y3=str(lig_loc[1]),
                        z3=str(lig_loc[2]),
                        tolerance="1.9499999"
                    )
                    target = ET.SubElement(
                        vector,
                        "target",
                        x3=str(prot_loc[0]),
                        y3=str(prot_loc[1]),
                        z3=str(prot_loc[2]),
                        tolerance="1.5"
                    )
        elif interaction in ["hydrophobic", "PI_saltbridge", "NI_saltbridge"]:
            pharm = generate_pharmacophore_centers(df, df.filter(regex=interaction).columns)
            for feature_name, position in pharm.items():
                feature_id_counter += 1
                point = ET.SubElement(
                    pharmacophore,
                    "point",
                    name=feature_type,
                    featureId=feature_name,
                    optional="false",
                    disabled="false",
                    weight="1.0",
                    coreCompound=core_compound,
                    id=f"feature{str(feature_id_counter)}"
                )
                location = ET.SubElement(
                    point,
                    "position",
                    x3=str(position[0]),
                    y3=str(position[1]),
                    z3=str(position[2]),
                    tolerance="1.5"
                )
        elif interaction == "pistacking":
            pharm = generate_pharmacophore_vectors(df, df.filter(regex=interaction).columns)
            feature_id_counter += 1
            lig_loc = position[0]
            prot_loc = position[1]
            
            vector = np.array(lig_loc) - np.array(prot_loc)
            normal_vector = vector / np.linalg.norm(vector)
            x, y, z = normal_vector
            
            plane = ET.SubElement(pharmacophore,
                                "plane",
                                name=feature_type,
                                featureId=interaction,
                                optional="false",
                                disabled="false",
                                weight="1.0",
                                coreCompound=core_compound,
                                id=f"feature{str(feature_id_counter)}")
            position = ET.SubElement(plane,
                                    "position",
                                    x3=str(lig_loc[0]),
                                    y3=str(lig_loc[1]),
                                    z3=str(lig_loc[2]),
                                    tolerance="0.9")
            normal = ET.SubElement(plane,
                                "normal",
                                x3=str(x),
                                y3=str(y),
                                z3=str(z),
                                tolerance="0.43633232")
            
            
    tree = ET.ElementTree(root)
    tree.write(output_filename, encoding="UTF-8", xml_declaration=True)
    
    
def generate_bindingmode_pharmacophore(dict_bindingmode, core_compound, sysname, outname, id_num=0,):
    """Generates pharmacophore from a binding mode and writes it to a .pml file

    Args:
        dict_bindingmode (dict): dictionary containing all interactions of the bindingmode and thei coresponding ligand and protein coordinates
        core_compound (str): name of the ligand
        sysname (str): name of the analysed system
        outname (str): name of the output .pml file
        id_num (int, optional): if multiple id number can enumerate the diferent bindingmodes. Defaults to 0.
    """
    feature_types = {
                "Acceptor_hbond": "HBA",
                "Donor_hbond": "HBD",
                "pistacking": "AR",
                "hydrophobic": "H",
                "PI_saltbridge": "PI",
                "NI_saltbridge": "NI"
            }
    feature_id_counter = 0
    root = ET.Element("MolecularEnvironment", version="0.0", id=f"OpennMMDL_Analysis{id_num}", name=sysname)
    pharmacophore = ET.SubElement(root, "pharmacophore", name=sysname, id=f"pharmacophore{id_num}", pharmacophoreType="LIGAND_SCOUT")

    for interaction in dict_bindingmode.keys():
        # get feature type
        for interactiontype in feature_types.keys():
            if interactiontype in interaction:
                feature_type = feature_types[interactiontype]
                break
        # generate vector features
        if feature_type in ["HBA", "HBD"]:
            if feature_type == "HBA":
                orig_loc = dict_bindingmode[interaction]['PROTCOO'][0]
                targ_loc = dict_bindingmode[interaction]['LIGCOO'][0]
            elif feature_type == "HBD":
                orig_loc = dict_bindingmode[interaction]['LIGCOO'][0]
                targ_loc = dict_bindingmode[interaction]['PROTCOO'][0]
            feature_id_counter += 1
            points_to_lig = "true" if feature_type == "HBA" else "false"
            hasSyntheticProjectedPoint = "false"
            vector = ET.SubElement(
                pharmacophore,
                "vector",
                name=feature_type,
                featureId=interaction,
                pointsToLigand=points_to_lig,
                hasSyntheticProjectedPoint=hasSyntheticProjectedPoint,
                optional="false",
                disabled="false",
                weight="1.0",
                coreCompound=core_compound,
                id=f"feature{str(feature_id_counter)}"
            )
            origin = ET.SubElement(
                vector,
                "origin",
                x3=str(orig_loc[0]),
                y3=str(orig_loc[1]),
                z3=str(orig_loc[2]),
                tolerance="1.9499999"
            )
            target = ET.SubElement(
                vector,
                "target",
                x3=str(targ_loc[0]),
                y3=str(targ_loc[1]),
                z3=str(targ_loc[2]),
                tolerance="1.5"
                )
        # generate point features
        elif feature_type in ["H", "PI", "NI"]:
            position = dict_bindingmode[interaction]['LIGCOO'][0]
            feature_id_counter += 1
            point = ET.SubElement(
                pharmacophore,
                "point",
                name=feature_type,
                featureId=interaction,
                optional="false",
                disabled="false",
                weight="1.0",
                coreCompound=core_compound,
                id=f"feature{str(feature_id_counter)}"
            )
            position = ET.SubElement(
                point,
                "position",
                x3=str(position[0]),
                y3=str(position[1]),
                z3=str(position[2]),
                tolerance="1.5"
            )
        # generate plane features        
        elif feature_type == "AR":
            feature_id_counter += 1
            lig_loc = dict_bindingmode[interaction]['LIGCOO'][0]
            prot_loc = dict_bindingmode[interaction]['PROTCOO'][0]
            
            # normalize vector of plane
            vector = np.array(lig_loc) - np.array(prot_loc)
            normal_vector = vector / np.linalg.norm(vector)
            x, y, z = normal_vector
            
            plane = ET.SubElement(pharmacophore,
                                "plane",
                                name=feature_type,
                                featureId=interaction,
                                optional="false",
                                disabled="false",
                                weight="1.0",
                                coreCompound=core_compound,
                                id=f"feature{str(feature_id_counter)}")
            position = ET.SubElement(plane,
                                    "position",
                                    x3=str(lig_loc[0]),
                                    y3=str(lig_loc[1]),
                                    z3=str(lig_loc[2]),
                                    tolerance="0.9")
            normal = ET.SubElement(plane,
                                "normal",
                                x3=str(x),
                                y3=str(y),
                                z3=str(z),
                                tolerance="0.43633232")


    tree = ET.ElementTree(root)
    tree.write(f"./Binding_Modes_Markov_States/{outname}.pml", encoding="UTF-8", xml_declaration=True)
    
    
def generate_pharmacophore_centers_all_points(df, interactions):
    """Generates pharmacophore points for all interactions to generate point cloud

    Args:
        df (pandas dataframe): dataframe generated by analysis using plip 
        interactions (list): list of interactions to generate pharmacophore from

    Returns:
        dict: interaction from which pharmacophore is generated as key and list of coordinates as value
    """
    coord_pattern = re.compile(r'\(([\d.-]+), ([\d.-]+), ([\d.-]+)\)')
    pharmacophore = {}
    for interaction in interactions:
        pharmacophore_points = []
        for index, row in df.iterrows():
            if row[interaction] == 1:
                coord_match = coord_pattern.match(row['LIGCOO'])
                if coord_match:
                    x, y, z = map(float, coord_match.groups())
                    pharmacophore_points.append([x, y, z])
        
        if pharmacophore_points:
            pharmacophore[interaction] = pharmacophore_points
    return pharmacophore



def generate_point_cloud_pml(cloud_dict, sysname, outname):
    """Generates pharmacophore point cloud and writes it to a .pml file

    Args:
        cloud_dict (dict): dictionary containing all interactions of the trajectory and their corresponding ligand coordinates
        sysname (str): name of the simulated system
        outname (str): name of the output .pml file
    """
    pharmacophore = ET.Element("pharmacophore", name=f'{sysname}_pointcloud', id=f"pharmacophore0", pharmacophoreType="LIGAND_SCOUT")
    feature_id_counter = 0
    for feature_type in cloud_dict.keys():
        for interaction in cloud_dict[feature_type].keys():
            if len(cloud_dict[feature_type][interaction]) > 1:
                feature_cloud = ET.SubElement(pharmacophore,
                                            "featureCloud",
                                            name=feature_type,
                                            featureId=interaction,
                                            optional="false",
                                            disabled="false",
                                            weight="1.0",
                                            id=f"feature{str(feature_id_counter)}")
                position = ET.SubElement(feature_cloud,
                                        "position",
                                        x3=str(cloud_dict[feature_type][interaction][0][0]),
                                        y3=str(cloud_dict[feature_type][interaction][0][1]),
                                        z3=str(cloud_dict[feature_type][interaction][0][2]))
                for additional_point in cloud_dict[feature_type][interaction][1:]:
                    additional_point = ET.SubElement(feature_cloud,
                                                    "additionalPoint",
                                                    x3=str(round(additional_point[0], 2)),
                                                    y3=str(round(additional_point[1], 2)),
                                                    z3=str(round(additional_point[2], 2)),
                                                    weight="1.0")
                
    tree = ET.ElementTree(pharmacophore)
    tree.write(f"{outname}.pml", encoding="UTF-8", xml_declaration=True)


    